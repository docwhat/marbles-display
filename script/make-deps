#!/usr/bin/env bash
# shellcheck disable=SC2016

set -euo pipefail

root=$(cd "$(dirname "$0")/.." && pwd)
readonly root
cd "${root}"

template_scad="base-template.scad"

mk_element_call() {
  local name="$1"

  local yq_prog
  printf -v yq_prog \
    '.elements[] | select(.name == "%s") | "element(\\"" + .symbol + "\\", \\"" + .number + "\\", \\"" + .density + "\\", \\"" + .mass + "\\");"' \
    "$name"

  yq eval -r "$yq_prog" data.yaml
}

mk_non_element_call() {
  local name="$1"

  local yq_prog
  printf -v yq_prog \
    '.non-elements[] | select(.name == "%s") | "non_element(\\"" + .name + "\\", \\"" + .density + "\\", \\"" + .mass + "\\");"' \
    "$name"

  yq eval -r "$yq_prog" data.yaml
}

# For each element in data.yaml, create a Makefile rule to build
# a .scad from the template, substituting the values.

scads=()

## Elements
###########
mapfile -t elements < \
  <(yq eval -r '.elements[].name' "data.yaml")

for Element in "${elements[@]}"; do
  read -r element < <(echo "${Element}" | tr '[:upper:]' '[:lower:]')
  new_scad="${element}-base.scad"

  scads=("${scads[@]:+"${scads[@]}"}" '$(GALLERY)/'"${new_scad}")
  printf '$(GALLERY)/%s: %s\n' \
    "${new_scad}" "${template_scad}"
  printf '\tperl -p -e '"'"'s!^(\\s+)(non_element|element)\\([^)]+\\);?!\\1%s!;'"'"' $< > $@' \
    "$(mk_element_call "$Element")"
  printf '\n\n'
done

## Non-Elements
###############

mapfile -t non_elements < \
  <(yq eval -r '.non-elements[].name' "data.yaml")

for NonElement in "${non_elements[@]}"; do
  read -r non_element < <(echo "${NonElement}" | tr '[:upper:]' '[:lower:]')
  new_scad="${non_element}-base.scad"

  scads=("${scads[@]:+"${scads[@]}"}" '$(GALLERY)/'"${new_scad}")
  printf '$(GALLERY)/%s: %s\n' \
    "${new_scad}" "${template_scad}"
  printf '\tperl -p -e '"'"'s!^(\\s+)(non_element|element)\\([^)]+\\);?!\\1%s!;'"'"' $< > $@' \
    "$(mk_non_element_call "$NonElement")"
  printf '\n\n'
done

printf 'SCADS = %s\n' "${scads[*]}"
printf '\n# EOF\n'

# EOF
